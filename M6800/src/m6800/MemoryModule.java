/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package m6800;

/**
 *
 * @author daves
 */
public class MemoryModule {

/*
**      Actual image of ET-3400A ROM from 0xFC00 to 0xFFFF
*/    
    public final int ET3400AROM [] = {
        0x8E,0x00,0xEB,0xBD,0xFD,0x8D,0x4E,0x67,0x3E,0x00,0x3E,0xE7,0xCE,0x00,0xCB,0xDF,0xF2,0x86,0xFF,0xC6,0x08,0x36,0x5A,0x26,0xFC,0x97,0xEE,0x86,0x19,0x36,0x86,0xFC,
        0x36,0xBD,0xFD,0xF4,0x7D,0x00,0xEE,0x27,0x08,0x81,0x0F,0x27,0xF4,0x81,0x0B,0x27,0xF0,0xDF,0xEC,0xCE,0xFF,0xB4,0x08,0x08,0x4A,0x2A,0xFB,0xA6,0x01,0x36,0xA6,0x00,
        0x36,0xDE,0xEC,0x96,0xEE,0x39,0xCE,0x00,0xE2,0x86,0xFF,0xC6,0x04,0x08,0x08,0xA1,0x00,0x26,0x04,0xA1,0x01,0x27,0x0E,0x5A,0x26,0xF3,0xBD,0xFD,0x8D,0x00,0x47,0x3E,
        0x0E,0x0E,0xA0,0x4C,0x39,0xDF,0xEE,0x8D,0x1D,0x1F,0x85,0x8D,0x08,0x4C,0x39,0xDF,0xEE,0x8D,0x13,0x3D,0x9D,0x8D,0x45,0xDE,0xEE,0xC6,0x02,0x7E,0xFD,0x25,0xDF,0xEE,
        0x8D,0x04,0x77,0xBD,0x20,0xEF,0xCE,0xC1,0x2F,0x7E,0xFE,0x50,0xDE,0xF2,0x08,0x08,0x08,0x08,0x08,0x08,0x8D,0xD9,0x8D,0x24,0x4F,0xC6,0x06,0xBD,0xFE,0x3A,0x5A,0x26,
        0xFA,0x8D,0x19,0xBD,0xFE,0x6B,0xC6,0x04,0x30,0xEE,0x08,0xA6,0x00,0x36,0x36,0x86,0x3F,0xA7,0x00,0x5A,0x26,0xF2,0xCE,0xFC,0xCE,0x7E,0xFE,0xFC,0xDF,0xEC,0xCE,0xC1,
        0x6F,0xDF,0xF0,0xDE,0xEC,0x39,0xCE,0x00,0xEE,0x8D,0xB3,0xDE,0xEE,0x39,0x30,0x9F,0xF2,0xA6,0x06,0x26,0x02,0x6A,0x05,0x4A,0xA7,0x06,0xE6,0x05,0xD7,0xEC,0x97,0xED,
        0x0C,0x8E,0x00,0xD9,0xC6,0x04,0x32,0x32,0x30,0xEE,0x08,0x9C,0xEC,0x26,0x01,0x0D,0xA7,0x00,0x5A,0x26,0xF1,0x24,0xAC,0xDE,0xEC,0x8D,0xC1,0xDF,0xEE,0xCE,0x00,0xEE,
        0xC6,0x02,0x8D,0x03,0xEE,0x00,0x5A,0x7E,0xFD,0x7B,0x8D,0xBA,0x8D,0xEB,0x8D,0x0B,0x08,0x20,0xF9,0x8D,0xB1,0x09,0x08,0x08,0x09,0x20,0xDE,0x5D,0x27,0x06,0x36,0x8D,
        0x22,0x8D,0x02,0x32,0x39,0x37,0x86,0x08,0x58,0xBD,0xFE,0x3A,0x5A,0x26,0xFA,0x33,0x8D,0x11,0x37,0xBD,0xFE,0x09,0xA7,0x00,0x08,0x5A,0x26,0xF7,0x33,0x17,0x09,0x4A,
        0x26,0xFC,0x39,0x37,0x96,0xF1,0x8B,0x20,0x5A,0x26,0xFB,0x97,0xF1,0x33,0x39,0x8D,0x3B,0x30,0x95,0x20,0x16,0x8D,0x35,0x77,0x0D,0x0D,0xFD,0x20,0x10,0x8D,0x2D,0x77,
        0x0D,0x0D,0x9F,0x20,0x09,0x8D,0x25,0x67,0x8D,0x4C,0x4C,0x5C,0x4C,0x4C,0x5C,0x8B,0x02,0xDE,0xF2,0x08,0x4A,0x26,0xFC,0x8D,0x02,0x4C,0x39,0x37,0xA6,0x00,0xBD,0xFE,
        0x20,0x08,0x5A,0x26,0xF7,0x33,0x17,0x09,0x4A,0x26,0xFC,0x39,0x5F,0xCE,0xC1,0x6F,0x7E,0xFE,0x50,0xBD,0xFC,0xBC,0xDE,0xF2,0xC6,0x20,0x4F,0xE5,0x01,0x27,0x01,0x4C,
        0xBD,0xFE,0x28,0x56,0x26,0xF4,0x4C,0x39,0x8D,0xE2,0x5B,0xE7,0xD6,0xF3,0xCB,0x07,0x99,0xF2,0x8D,0x6C,0x17,0x5F,0x8D,0x68,0x86,0x01,0x39,0x37,0xF6,0xC0,0x03,0xB6,
        0xC0,0x06,0x48,0x48,0x48,0x59,0x48,0x59,0x48,0x59,0x37,0xF6,0xC0,0x05,0xC4,0x1F,0x1B,0x33,0x43,0x53,0xDF,0xEC,0xCE,0xFF,0xA5,0x11,0x27,0x11,0x24,0x06,0x36,0x17,
        0x33,0xCE,0xFF,0xAD,0x5D,0x26,0x06,0x08,0x48,0x22,0xFC,0x27,0x01,0x0C,0xA6,0x00,0xDE,0xEC,0x33,0x39,0x37,0xC6,0x20,0x8D,0xC2,0x25,0xFA,0x5A,0x26,0xF9,0xC6,0x20,
        0x8D,0xB9,0x24,0xFA,0x5A,0x26,0xF9,0x33,0x39,0x8D,0xE9,0x8D,0x1B,0x48,0x48,0x48,0x48,0x37,0x16,0x8D,0xDF,0x8D,0x11,0x1B,0x33,0x36,0x8D,0x9F,0x25,0xFC,0x32,0x39,
        0x36,0x44,0x44,0x44,0x44,0x8D,0x01,0x32,0x36,0x84,0x0F,0xDF,0xEC,0xCE,0xFF,0x95,0x08,0x4A,0x2A,0xFC,0xA6,0x00,0x8D,0x04,0x32,0x39,0xDF,0xEC,0xDE,0xF0,0x37,0x49,
        0x49,0xC6,0x10,0x49,0xA7,0x00,0x09,0x5A,0x26,0xF9,0xDF,0xF0,0xDE,0xEC,0x33,0x39,0xDF,0xF0,0x30,0xEE,0x00,0x31,0x31,0xA6,0x00,0x8D,0xDF,0x08,0x4D,0x2A,0xF8,0x4F,
        0x6E,0x00,0x8D,0x07,0xDE,0xF2,0xEE,0x06,0x7E,0xFC,0xF9,0x9F,0xEE,0xDE,0xF2,0xA6,0x07,0x36,0xA6,0x06,0x36,0xEE,0x06,0x86,0x3F,0x36,0x36,0xA6,0x02,0x36,0xA6,0x01,
        0x36,0xA6,0x00,0x36,0x16,0xCE,0xFF,0x75,0x08,0xC0,0x08,0x24,0xFB,0xA6,0x00,0x46,0x5C,0x26,0xFC,0x32,0x36,0x25,0x1E,0x81,0x30,0x24,0x04,0x81,0x20,0x24,0x14,0x81,
        0x60,0x25,0x11,0x81,0x8D,0x27,0x0C,0x84,0xBD,0x81,0x8C,0x27,0x04,0x84,0x30,0x81,0x30,0xC2,0xFF,0x5C,0x5C,0x27,0x70,0x30,0x25,0x02,0xE7,0x01,0x86,0x01,0xC1,0x02,
        0x2E,0x06,0x27,0x02,0xA7,0x01,0xA7,0x02,0x4F,0xEB,0x06,0xA9,0x05,0xA7,0x05,0xE7,0x06,0xDE,0xF2,0xA7,0x06,0xE7,0x07,0xC6,0x06,0x32,0x36,0x84,0xCF,0x81,0x8D,0x32,
        0x27,0x48,0x81,0x6E,0x27,0x5B,0x81,0x7E,0x27,0x5E,0x81,0x39,0x27,0x62,0x81,0x3B,0x27,0x6C,0x81,0x3F,0x27,0x6E,0xAF,0x06,0x36,0xCE,0xFF,0x05,0x86,0x7E,0x97,0xF4,
        0xDF,0xF5,0x9E,0xF2,0x3B,0x30,0xEE,0x05,0x08,0x4F,0x5F,0x9C,0xEE,0x26,0x0C,0x09,0xEE,0x00,0x09,0xE6,0x00,0x2A,0x01,0x43,0x30,0xEE,0x05,0xEB,0x01,0xA9,0x00,0x30,
        0xA7,0x05,0xE7,0x06,0x09,0xDF,0xF2,0x9E,0xEE,0x39,0x81,0x8D,0x26,0x02,0x86,0x5F,0x80,0x3F,0x36,0x09,0x09,0xDF,0xF2,0xA6,0x03,0xA7,0x01,0x08,0x5A,0x2A,0xF8,0x20,
        0x90,0x33,0x4F,0xEB,0x05,0xA9,0x04,0x8C,0x32,0x33,0xA7,0x06,0xE7,0x07,0x20,0xD5,0x08,0x08,0xDF,0xF2,0xA6,0x03,0xA7,0x05,0x09,0x5A,0x2E,0xF8,0x20,0xC9,0x08,0x5A,
        0x2A,0xFC,0x20,0xC1,0xA6,0x07,0xA7,0x00,0x09,0x5A,0x2A,0xF8,0x8A,0x10,0xA7,0x01,0xC6,0xFA,0x86,0x00,0x20,0xD4,0x9C,0x00,0x3C,0xAF,0x40,0x00,0x00,0xAC,0x64,0x12,
        0x64,0x12,0x64,0x10,0x64,0x10,0x11,0x01,0x10,0x04,0x10,0x00,0x10,0x00,0x11,0x0D,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B,
        0x77,0x1F,0x4E,0x3D,0x4F,0x47,0x07,0x0A,0x0D,0x02,0x05,0x08,0x0B,0x0E,0x03,0x06,0x09,0x0C,0x0F,0x00,0x01,0x04,0xFC,0x45,0xFD,0x55,0xFD,0x5D,0xFD,0x65,0xFD,0x4F,
        0xFD,0x93,0xFD,0xA8,0xFC,0x96,0xFE,0x62,0xFC,0x46,0xFD,0x0A,0xFD,0x18,0xFD,0x1B,0xFC,0x8C,0xFD,0x13,0xFD,0x16,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xF7,0x00,0xF4,0x00,0xFD,0xFC,0x00
    };
    
    final static int MEMSIZE = 65536;
    private final int memArray[];
    final static int RAMSTART = 0;
    final static int ROMSTART = 0xFC00;
    final static int DISPLAYSTART = 0xC110;
    final static int KEYPADSTART = 0xC003;
    final int RAMSIZE = 512;
    final int ROMSIZE = 1024;
    final int DISPLAYSIZE = 0x60;
    final int KEYPADSIZE = 8;
    final static int KEYPADDEBOUNCE = 32;
    static int debug;
    
    private final int KeypadCounter[];
    
    
    MemRegion RAM;
    MemRegion ROM;
    MemRegion DISPLAY;
    MemRegion KEYPAD;

/*
**      MemWrite - Accessor for writable memory (RAM and display)
*/    
    public void MemWrite(int iAddress, int iValue)
    {
        if((iAddress >= RAM.memstart && iAddress < (RAM.memstart + RAM.memsize)) ||
                (iAddress >= DISPLAY.memstart && iAddress < (DISPLAY.memstart + DISPLAY.memsize)))
        {
            memArray[iAddress] = (iValue & 0xFF);
        }
        if ((iAddress == 0) && (iValue == 7))
            debug = 1;
        else
            debug = 0;
    }

/*
**      MemRead - Accessor for reading RAM/ROM/Keypad/Display
*/
    public int MemRead(int iAddress)
    {
        if ((iAddress >= RAM.memstart && iAddress < (RAM.memstart + RAM.memsize)) ||
                (iAddress >= DISPLAY.memstart && iAddress < (DISPLAY.memstart + DISPLAY.memsize)))
        {
            return (memArray[iAddress]);
        }
        else if (iAddress >= KEYPAD.memstart && iAddress < (KEYPAD.memstart + KEYPAD.memsize))
        {
            //Since a real ET-3400A uses a multiplexed keypad, translate virtual
            //keypresses into hardware bits.
            return(KeypadRead(iAddress));
        }
        else if (iAddress >= ROM.memstart && iAddress < (ROM.memstart + ROM.memsize))
        {
            return (ET3400AROM[iAddress - ROM.memstart]);
        }
        else
            return (0);
    }
    
/*
**      MemoryModule - Constructor
*/
    public MemoryModule()
    {
        memArray = new int[MEMSIZE];
        KeypadCounter = new int[16];
        int iCounter;
        for(iCounter = 0; iCounter < MEMSIZE; iCounter++)
            memArray[iCounter] = 0;
        for (iCounter = 0; iCounter < 16; iCounter++)
        {
            KeypadCounter[iCounter] = 0;
        }
        RAM = new MemRegion(RAMSTART, RAMSIZE);
        ROM = new MemRegion(ROMSTART, ROMSIZE);
        DISPLAY = new MemRegion(DISPLAYSTART, DISPLAYSIZE);
        KEYPAD = new MemRegion(KEYPADSTART, KEYPADSIZE);
    }
    
    public int KeypadRead(int address)
    {
        int iValue = 0xFF;
        if((address & 1) == 0) // 0, 1, 4, 7, A, D keys
        {
            if(KeypadCounter[0] > 0) // 0 key
            {
                iValue &= ~(1<<5);
                KeypadCounter[0]--;
            }
            if(KeypadCounter[1] > 0) // 1 key
            {
                iValue &= ~(1<<4);
                KeypadCounter[1]--;
            }
            if(KeypadCounter[4] > 0)
            {
                iValue &= ~(1<<3);
                KeypadCounter[4]--;
            }
            if(KeypadCounter[7] > 0)
            {
                iValue &= ~(1<<2);
                KeypadCounter[7]--;
            }
            if(KeypadCounter[10] > 0)
            {
                iValue &= ~(1<<1);
                KeypadCounter[10]--;
            }
            if(KeypadCounter[13] > 0)
            {
                iValue &= ~(1);
                KeypadCounter[13]--;
            }
        }
        if((address & (1<<1)) == 0) //2, 5, 8, B, E keys
        {
            if(KeypadCounter[2] > 0)
            {
                iValue &= ~(1<<4);
                KeypadCounter[2]--;
            }
            if(KeypadCounter[5] > 0)
            {
                iValue &= ~(1<<3);
                KeypadCounter[5]--;
            }
            if(KeypadCounter[8] > 0)
            {
                iValue &= ~(1<<2);
                KeypadCounter[8]--;
            }
            if(KeypadCounter[11] > 0)
            {
                iValue &= ~(1<<1);
                KeypadCounter[11]--;
            }
            if(KeypadCounter[14] > 0)
            {
                iValue &= ~(1);
                KeypadCounter[14]--;
            }
        }
        if((address & (1<<2)) == 0) // 3, 6, 9, C, F keys
        {
            if(KeypadCounter[3] > 0)
            {
                iValue &= ~(1<<4);
                KeypadCounter[3]--;
            }
            if(KeypadCounter[6] > 0)
            {
                iValue &= ~(1<<3);
                KeypadCounter[6]--;
            }
            if(KeypadCounter[9] > 0)
            {
                iValue &= ~(1<<2);
                KeypadCounter[9]--;
            }
            if(KeypadCounter[12] > 0)
            {
                iValue &= ~(1<<1);
                KeypadCounter[12]--;
            }
            if(KeypadCounter[15] > 0)
            {
                iValue &= ~(1);
                KeypadCounter[15]--;
            }
        }
        return(iValue & 0xFF);
    }
    
    public void KeypadWrite(int key)
    {
        if(KeypadCounter[key] == 0)
        {
            KeypadCounter[key] = KEYPADDEBOUNCE;
        }
    }
}

class MemRegion
{
    int memstart;
    int memsize;
    MemRegion(int start, int size)
    {
       this.memstart = start;
       this.memsize = size;
    }
}
